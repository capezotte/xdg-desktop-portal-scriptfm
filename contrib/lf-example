#!/bin/sh

# Helps to see where a script got stuck/failed.
# You can check xdp-sfm's logs.
set -x

# Store the last directory we used somewhere.
xdp_cd="$XDG_RUNTIME_DIR/xdp-cd"

# The "arguments" to the script.
multiple="${SFM_MULTIPLE:-0}"
directory="${SFM_DIRECTORY:-0}"
save="${SFM_SAVE:-0}"
# Start at the program's recommendation, or the last used folder.
if [ "$SFM_PATH" ]; then
	path="$SFM_PATH"
elif [ -r "$xdp_cd" ]; then
	read -r path < "$xdp_cd"
fi
path="${path:-$HOME}" # HOME if all else fails.

# Keep filenames here to check if they are overwritten.
out="$XDG_RUNTIME_DIR/xdp-tfc-$$"
: > "$out"

# scriptfm sends us a SIGHUP if the request is canceled.
# WINDOW will come up later; stay tuned.
cleanup() { kill -TERM "$WINDOW"; rm -f -- "$out"; }
trap cleanup HUP EXIT

# File the user should rename to save.
# See contrib/ranger-wrapper on xdp-tfc for more details.
if [ "$save" -eq 1 ]; then
	if [ "$directory" -ne 1 ] && [ -d "$path" ]; then
		path="${path%/}/save"
	fi
	[ -e "$path" ] || touch -- "$path"
fi

# lf writes to two files, one the current directory and
# the other, the files selected. This basically saves the
# directory if we are only going to use the file.
dir_path="$xdp_cd"
file_path=/dev/null
if [ "$directory" -eq 0 ]; then
	file_path="$out"
else
	dir_path="$out"
fi

# The actual file selection box.
# lf will write the selected files to $file_path and the directory to
# $dir_path.
# We put it in the background and wait because we'd like to store their
# PIDs in order to stop them when asked to exit.
foot -e \
	lf -selection-path "$file_path" -last-dir-path "$dir_path" \
	"$path" &
WINDOW=$!
wait

# Check if any files are going to be overwritten.
# Same & WINDOW=$! in order to store the PID, and now wait "$WINDOW"
# to get the exit code (i.e. know if yes or no was chosen).
# Since lf writes NUL-terminated to the file, we need xargs -0.
if [ "$save" -eq 1 ] && [ -s "$out" ] && ! xargs -n1 -0 -- test ! -s < "$out"; then
	if zenity --question --text="The following files will be overwritten:

$(xargs -0 printf '%s\n' < "$out")

Ok?" & WINDOW=$!; ! wait "$WINDOW"
	then
		# User doesn't want to overwrite. Empty the file.
		: > "$out"
	fi
fi

# Remove the program's suggested file if we didn't write anything to it.
if [ "$save" -eq 1 ] && [ ! -s "$path" ]; then
	rm -f -- "$path"
fi

# Give the file list to scriptfm, which will hand them over to the program.
cat -- "$out"
